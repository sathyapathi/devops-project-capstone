pipeline {
    agent any

    options {
        timeout(time: 30, unit: 'MINUTES')  // Pipeline will time out after 30 minutes
    }

    environment {
        GIT_REPO = "https://github.com/sathyapathi/devops-project-capstone.git"
        DOCKER_IMAGE = "sathyapathi/capstone-image:1.0"
        DOCKERFILE_NAME = "Dockerfile_capstone"
        DOCKER_CREDENTIALS = "docker-hub-credentials" // Jenkins credentials ID for DockerHub
        INVENTORY_SERVERS_TEST = "Server_Inventory_Test.txt"
        ANSIBLE_PLAYBOOK_TEST = "ansible_playbook_configure-test-servers.yml"        
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Cloning the repository..."
                    git branch: 'main', url: "${GIT_REPO}"
                }
            }
        }

        // Explict approvals for pushing before Production Servers       
        /*
        stage('Approval for Production Deployment') {
            when {
                beforeAgent true
                expression { return true }  // Always ask for approval before deploying to production
            }
            steps {
                script {
                    input message: "Deploy to Production?", ok: "Proceed"
                }
            }
        }
		*/
		
		
		// Rollout to Production Servers
        stage('Deploy to Prod Servers') {
            steps {
                script {
                    echo "Deploying to Prod servers using Ansible..."
                    timeout(time: 5, unit: 'MINUTES') {  // Timeout for production deployment
                        withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", usernameVariable: "DOCKER_USER", passwordVariable: "DOCKER_PASS")]) {
                            sh """
                                export DOCKER_USERNAME=${DOCKER_USER}
                                export DOCKER_PASSWORD=${DOCKER_PASS}
                                ansible-playbook -i ${INVENTORY_SERVERS_PROD} ${ANSIBLE_PLAYBOOK_PROD}
                            """
                        }
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up unused Docker images..."
                    sh "docker system prune -f"
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Please check the logs."
        }
    }
}
