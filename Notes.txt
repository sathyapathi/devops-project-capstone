#################### devops-project-capstone ####################

########## Git Repositories ##########
https://github.com/sathyapathi/devops-project-capstone.git
https://github.com/sathyapathi/devops-project-capstone-testing.git

########## Terraform ##########

# Terraform Validate
1. terraform --version

# Initialize Terraform
1. Create provider.tf and update with the provider ex: aws/azure/etc
2. terraform init
3. terraform show
4. terraform test


# Terraform Run

1. terraform test
2. terraform plan
3. terraform apply


########## Git ##########
# Git Validate
1. git --version

#### Git repo permissions ######
1. Generate PAT and provide necessary permissions
# 2. git remote set-url origin https://<YOUR_GITHUB_USERNAME>:<YOUR_PERSONAL_ACCESS_TOKEN>@github.com/sathyapathi/devops-project-capstone.git





########## Git commands ##########
1. git status
2. git add .
3. git commit -m "Initial commit"
4. git remote -v
5. git diff origin/main
6. git push origin main


########## Git PAT Key / Generate token ##########
1. Loging to GitHub
2. Click on Account Profile icon -> Settings -> Developer Settings
3. Select Personal access tokens -> Fine-grained tokens
4. Generate new token -> Provide Token name 
5. Repository access : "Only select repositories"
6. Permissions: select necessary permissions
7. Generate token

########## Git repo Connect  first time ##########
1. git clone https://github.com/sathyapathi/devops-project-capstone-testing.git
ex: git clone https://github.com/sathyapathi/devops-project-capstone-testing.git
ex: git clone https://github.com/sathyapathi/devops-project-capstone.git

2. git remote set-url origin https://<YOUR_GITHUB_USERNAME>:<YOUR_PAT>@github.com/sathyapathi/devops-project-capstone-testing.git
ex: git remote set-url origin https://sathyapathi:<PAT>@github.com/sathyapathi/devops-project-capstone-testing.git
ex: git remote set-url origin https://sathyapathi:<PAT>@github.com/sathyapathi/devops-project-capstone.git





########## Install Maven ##########

1. sudo apt update
2. sudo apt install maven
3. mvn --version
4. java --version

########## Install JAVA ##########
1. It will be installed automatillcat when you install maven
1. sudo apt update
2. sudo apt install jdk20

########## Install Jenkins ##########
1. Add Jenkins GPG Key
# curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \
/usr/share/keyrings/jenkins-keyring.asc > /dev/null

2. Add the Jenkins Repository
# echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
https://pkg.jenkins.io/debian binary/" | sudo tee \
/etc/apt/sources.list.d/jenkins.list > /dev/null

3. update the package list
# sudo apt update

4. Install Jenkins
# sudo apt install jenkins

5. Validate
jenkins --version

########## Enable Jenkins to start automatically ##########


6. Start and Enable Jenkins

# sudo systemctl start jenkins
# sudo systemctl enable jenkins

7. Check Jenkins status:
# sudo systemctl status jenkins



########## Jenkins Configuration ##########
1. Get the initial Jenkins Password
sudo cat /var/lib/jenkins/secrets/initialAdminPassword


########## Access Jenkins & Configure ##########

1. http://<server_ip>:8080
2. Enter Initial Admin Password located in /var/lib/jenkins/secrets/initialAdminPassword 
3. Installed Suggested Plugins
4. create one user - admin
5. whenver server IP changes, update IP address in Jenkins -> 



########## Install Docker ##########
1. sudo apt update
2. sudo apt install docker.io
docker --version


########## Docker Permissions to Jenkins ##########

1. sudo usermod -aG docker jenkins
2. 


########## Install Ansible ##########
1. sudo apt update
2. sudo apt install ansible
ansbile --version

########## configure private key for Ansible ##########

sudo mkdir -p /var/lib/jenkins/.ssh
sudo chown jenkins:jenkins /var/lib/jenkins/.ssh
sudo chmod 700 /var/lib/jenkins/.ssh


1. sudo cp /home/ubuntu/devops_demo.pem /var/lib/jenkins/.ssh/devops_demo.pem
2. sudo chown jenkins:jenkins /var/lib/jenkins/.ssh/devops_demo.pem
3. sudo chmod 400 /var/lib/jenkins/.ssh/devops_demo.pem


########## Test Ansible Connection ##########

ansible -i /var/lib/jenkins/workspace/DevOps-Capstone/Server_Inventory_Test.txt test_servers -m ping



########## Install Google Chrome Driver ##########

1. sudo apt update
2. sudo apt install -y google-chrome-stable
3. google-chrome --version

If the above doesn't work, install it manually


1. sudo apt update
2. wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
3. sudo apt install wget
4. sudo dpkg -i google-chrome-stable_current_amd64.deb
5. sudo apt-get install -f
6. google-chrome --version





###### Install Docker ######


##### Install ansible #####
1. sudo apt update





########## Jenkins Pipeline configuration START ##########


## Test Envinronment
1. Project Name: 1.Capstone-Test-Env
2. Triigers: GitHub hook trigger for GISTcm polling
3. Pipeline : 
		Defination: Pipeline script from SCM
			SCM: Git 
				Repository : https://github.com/sathyapathi/devops-project-capstone.git
				Branches : */main
				Script Path : Jenkinsfile_Rollout_Test


## Testing - QA Check - Run Test Cases
1. Project Name: 2.Capstone-QA-Check
2. Triigers: Build after other projects are built
		Projects to Watch: Capstone-Test-Env, 
		Trigger only if build is stable : checkbox
3. Pipeline : 
		Defination: Pipeline script from SCM
			SCM: Git 
				Repository : https://github.com/sathyapathi/devops-project-capstone.git
				Branches : */main
				Script Path : Jenkinsfile_QA_Check
				
				
## Deploy to Prod Envinronment
1. Project Name: 3.Capstone-Prod-Env
2. Triigers: Build after other projects are built
		Projects to Watch: Capstone-QA-Check,, 
		Trigger only if build is stable : checkbox
3. Pipeline : 
		Defination: Pipeline script from SCM
			SCM: Git 
				Repository : https://github.com/sathyapathi/devops-project-capstone.git
				Branches : */main
				Script Path : Jenkinsfile_Rollout_Prod
				



########## Jenkins Pipeline configuration END ##########


#Test
